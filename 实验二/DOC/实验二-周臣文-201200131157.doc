计算机图形学实验二报告
姓名:周臣文
学号:201200131157
班级:计算机3班
完成日期:2015年4月25日

（一）实验名称
简单的图形软件包中各种图素生成算法的设计和实现
（二）实验环境
1.操作系统：Ubuntu14.10
2.编程环境：G++编译器，openGL库,Gedit
（三）实验目的
1. 熟悉利用OpenGL应用程序基本架构；
2. 学习利用OpenGL中的的gl、glu、glut等库函数进行图形学算法编程和实现；
（四）实验内容
1.复习巩固对ubuntu环境下OpenGL库函数的引入和设置方法，学习采用GLUT库函数的OpenGL图形学编程技术。
2. 简单OpenGL程序的建立与调试及运行。
3.在实验一的基础上对机器人填充颜色，通过改变glPolygonMode，切换是否填充机器人。
4.实现对机器人的平移、旋转和放缩功能，完成编程和调试。

  (五)   实验过程
            1.扫描线种子填充算法
		本实验最大的难点在于理解书本上的算法,并且完善它.扫描线种子填充算法的主要思想是:
	从给定的种子点开始,填充当前扫描线上的种子点所在的区间,然后确定与这一区间相邻的上下两条扫	描线上需要填充的区间,从这些区间上各取一个种子点并且把他们保存到栈里,作为下次填充的种子点,	反复进行这样的过程,知道所有区间都填充完成.
		本试验中,我完成的工作:
		1).完善算法
		书本上的算法并未给出 y=y-2的情况如何处理.其实,这种情况与y=y-1的情况类似,	我们只	需要把之前的部分代码拷贝过来就可以使用了
		2).实现填充区域颜色的方法:
		书上完成颜色填充功能的方法只是一个抽象函数,需要我们具体实现.关于这个方法的实现,有两种	主要的方式,一种是我们之前使用的glPoint方法,即把颜色填充看做成画点,只要画出带有颜色的点就	好了.这种方式我不推荐,因为使用glPoint会有一些小麻烦,在后面我们详述我遇到的问题;再有一种	方法就是使用glDrawpiexls()方法实现.这个方法的主要功能是填充部分像素点.	
		3)实现判断颜色是否相同的方法
	同样,书上实现这个功能的方法也是一个抽象方法,需要我们具体实现.我使用的函数是glReadPiexls.

关于颜色填充的两种方法比较:
1.glpoint()

	这种方法其实就是通过画点来代替填充像素点.部分实现代码如下:

void glpoint(int x,int y,GLubyte newColor[]){
		glPointSize(1.0f);
		glBegin(GL_POINTS);
		glColor3ub(newColor[0],newColor[1],newColor[2]);
		glVertex2i(x,y);
		glEnd();
		glFlush();
}
经过我的很多次实验,我发现,通过这种方式实现颜色填充的话,再使用glReadPiexls方法读出来的像素点颜色不正确.
例如:如果我们使用glpoint方法在坐标(0,0)画出一个点,之后使用glReadPiexls读出(0,0)坐标点的色值,会发现该色值并不等于我们画点时使用的色值.但是如果读取(-1,0)点的色值,会发现该点的色值是正确的.同理,我试着读取(0,-1),(1,0),(1,1),(0,1),(-1,1),(-1,-1),(1,-1)这7个点(围绕着(0,0)点的7个点),也都没有读到正确的色值.所以得出的结论是:使用glPoint方式画点,想要读取正确色值,需要把横坐标减1.这也是我之前使用该方法的进行颜色填充失败的主要原因.

2.glDrawPixels(1.0, 1.0,GL_RGB, GL_UNSIGNED_BYTE, newColor);

	该函数包含五个参数,前两个参数表示要画的图像的长度和宽度,这里我们每次只填充一个像素;GL_RGB表示颜色色值采用RGB表示; GL_UNSIGNED_BYTE表示数据使用无符号byte类型(0~255).newColor表示颜色色值(是一个长度为3的数组)
在使用该函数之前,我们需要使用glRasterPos2i(x,y);帮助我们定位填充位置.
具体代码如下:


//绘制像素点
void drawColor(int x,int y,GLubyte newColor[]){
	glRasterPos2i(x,y);
	glDrawPixels(1.0, 1.0,GL_RGB, GL_UNSIGNED_BYTE, newColor);
	glutSwapBuffers();
}


2.图形的旋转,平移,放缩.
	放缩:
	glScalef(0.5,0.5,0.5); 
	三个参数表示在x,y,z轴上的放缩倍数
	旋转:
	glRotatef(30,0.0,0.0,1.0); 
	平移:
	glTranslatef(0.0,10.0,0.0); 
	三个参数表示在x,y,z轴上的平移变化
部分代码:
void menu(int value){
	switch(value){
		case 2:{
			//缩小,三个坐标表示x,y,z缩小倍数
			glScalef(0.5,0.5,0.5); 
			glutPostRedisplay();
			break;
		}
		case 3:{
			//放大,三个坐标表示x,y,z放大倍数
			glScalef(2.0,2.0,2.0); 
			glutPostRedisplay();
			break;
		}
		case 4:{
			//旋转
			glRotatef(30,0.0,0.0,1.0); 
			glutPostRedisplay();
			break;
		}
		case 5:{
			glTranslatef(0.0,10.0,0.0); 
			glutPostRedisplay();
			break;
		}
		case 6:{
			glTranslatef(0.0,-10.0,0.0); 
			glutPostRedisplay();
			break;
		}
		case 7:{
			glTranslatef(-10.0,0.0,0.0); 
			glutPostRedisplay();
			break;
		}
		case 8:{
			glTranslatef(10.0,0.0,0.0); 
			glutPostRedisplay();
			break;
		}
		
	}
}
(六)实验心得
	本次实验中踩的坑比较多,首先是扫描线填充算法理解比较困难,然后实现填充颜色的方法也折腾了很久,还有,对于C++指针引用的使用和理解不够深入,导致代码很多地方出现问题.当然,最终还是解决了所有的困难,实现颜色填充和旋转平移放缩变换.在这次实验中,也学习到了很多opengl的知识,了解了一些opengl函数的使用方法.
